#!/bin/bash
# Script to run Openstack VPC jobs

NOVA_URL=$1
NOVA_MERGE_TRUNK=$2
GLANCE_URL=$3
GLANCE_MERGE_TRUNK=$4

CHEF_INSTALLER_CONF=$5
NODES_JSON_CONF=$6
SERVER_GROUP_JSON_CONF=$7

TMP_DIR=$(mktemp -d)

# Log to the job log and stdout
function fail {
	local MSG=$1
	echo "FAILURE_MSG=$MSG"
	exit 1
}

function get_nova_source {
#FIXME: need to implement a Git version of this function as well.

	bzr branch "$NOVA_URL" nova_source || \
		fail "Failed to checkout bzr branch."
	local NOVA_REVISION=$(bzr version-info nova_source | grep revno | sed -e "s|revno: ||")
	[ -z "$NOVA_REVISION" ] && fail "Failed to obtain nova revision from bzr."
	echo "NOVA_REVISION=$NOVA_REVISION"

	if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
		cd nova_source || fail "Failed to cd into nova_source directory."
		bzr merge lp:nova || fail "Failed to merge lp:nova."
		cd $TMP_DIR
	fi

}

function get_glance_source {
#FIXME: need to implement a Git version of this function as well.

	bzr branch "$GLANCE_URL" glance_source || \
		fail "Failed to checkout bzr branch."
	local GLANCE_REVISION=$(bzr version-info glance_source | grep revno | sed -e "s|revno: ||")
	[ -z "$GLANCE_REVISION" ] && fail "Failed to obtain glance revision from bzr."
	echo "GLANCE_REVISION=$GLANCE_REVISION"

	if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
		cd glance_source || fail "Failed to cd into glance_source directory."
		bzr merge lp:glance || fail "Failed to merge lp:glance."
		cd $TMP_DIR
	fi

}

function run_job {

chef-vpc-toolkit -v || \
	fail "Please install the Chef VPC Toolkit."

cd $TMP_DIR
[ -n "$NOVA_URL" ] && get_nova_source
[ -n "$GLANCE_URL" ] && get_glance_source

git clone <%= ENV['OPENSTACK_VPC_URL'] %> openstack_vpc && cd openstack_vpc || \
	fail "Failed to checkout openstack VPC."

cp "$CHEF_INSTALLER_CONF" config/chef_installer.yml || \
	fail "Failed to copy chef_installer.yml"

cp "$NODES_JSON_CONF" config/nodes.json || \
	fail "Failed to copy nodes.json"

cp "$SERVER_GROUP_JSON_CONF" config/server_group.json || \
	fail "Failed to copy server_group.json"

trap "rake group:delete && cd /tmp && rm -Rf $TMP_DIR" INT TERM EXIT
if rake group:create && rake group:poll; then

	rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
		DEB_PACKAGER_URL=<%= ENV['NOVA_DEB_PACKAGER_URL'] %> || \
		fail "Failed to build nova packages."

	rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
		DEB_PACKAGER_URL=<%= ENV['GLANCE_DEB_PACKAGER_URL'] %> || \
		fail "Failed to build glance packages."

	# install Chef and the Chef Cookbooks
	rake chef:push_repos && rake chef:install || \
		{ rake chef:tail_logs; fail "Failed to install Chef server."; }

	# poll for Chef clients to finish runnings
	rake chef:poll_clients CHEF_TIMEOUT=600 || \
		{ rake chef:tail_logs; fail "Chef client timeout."; }

	# run OS API v1.0 tests (Uses the Ruby openstack-compute gem)
	rake nova:ruby_osapi_tests SERVER_NAME=nova1 || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "OS API tests failed."; }

	# run smoke tests
	rake nova:smoke_tests SERVER_NAME=nova1 || \
		{ rake nova:tail_logs SERVER_NAME=nova1; fail "Smoke tests failed."; }

else
	rake chef:tail_logs
	fail "Failed to create server group."
fi

}

run_job
