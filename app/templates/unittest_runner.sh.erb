TMP_DIR=$(mktemp -d)

function override_sudo {
  # test suites should stub out sudo. If it is called return an exit status.
  mkdir "$TMP_DIR/bin" && cd "$TMP_DIR/bin"
  echo "#!/bin/bash" > sudo
  echo "/bin/false" >> sudo
  chmod 755 sudo
  export PATH="$TMP_DIR/bin:$PATH"
}

function is_master {
  local PROJ_URL=$1
  local MASTER_URL=$2
  local BRANCH=$3
  [ "$PROJ_URL" == "$MASTER_URL" ] && [ "$BRANCH" == "master" ]
}

function handle_venv_results {
  local PROJECT=$1
  local FILENAME=$2
  local SEARCH_STR="$PROJECT development environment setup is complete"
  grep -q "$SEARCH_STR" $FILENAME
  if [ $? -eq 0 ]; then # print from SEARCH_STR to end of the file
    perl -ne "print if /$SEARCH_STR/ .. 0" $FILENAME
  else
    # cat test output excluding the environment
    cat $FILENAME | grep -v env=
  fi
}

function run_job {

trap "{ cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
override_sudo
export PIP_DOWNLOAD_CACHE="~/.pip/unittest_runner_cache"
export PIP_USE_MIRRORS=true
local RETVAL=0
local TESTS_RUN=0
local MSG=""
cd $TMP_DIR

if ! is_master "$NOVA_URL" "$NOVA_GIT_MASTER" "$NOVA_BRANCH"; then
  TESTS_RUN=$(( $TESTS_RUN + 1 ))
  if [ -n "$NOVA_URL" ]; then
    get_nova_source_git
  fi
  cd $TMP_DIR/nova_source
  python setup.py sdist &> sdist.out || \
    { echo "Failed to create tarball."; cat sdist.out; exit 1; }
  cd dist
  tar xf nova*.tar.gz
  rm nova*.tar.gz
  cd nova*
  tox -epy27 &> nova.out.log
  local NOVA_STATUS=$?
  tox -epep8 &> nova_pep8.out.log
  local NOVA_PEP8_STATUS=$?
  if [ "$NOVA_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Nova tests failed. "
    handle_venv_results Nova nova.out.log
  fi
  if [ "$NOVA_PEP8_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Nova pep8 failed. "
    cat nova_pep8.out.log | grep -v env=
  fi
fi

if ! is_master "$GLANCE_URL" "$GLANCE_GIT_MASTER" "$GLANCE_BRANCH"; then

  TESTS_RUN=$(( $TESTS_RUN + 1 ))
  if [ -n "$GLANCE_URL" ]; then
    get_glance_source_git
  fi
  cd $TMP_DIR/glance_source
  python setup.py sdist &> sdist.out || \
    { echo "Failed to create tarball."; cat sdist.out; exit 1; }
  cd dist
  tar xf glance*.tar.gz
  rm glance*.tar.gz
  cd glance*
  #NOTE: temp fix for "File exists: '/tmp/glance-tests'" errors
  rm -Rf /tmp/glance-tests*
  tox -epy27 &> glance.out.log
  local GLANCE_STATUS=$?
  tox -epep8 &> glance_pep8.out.log
  local GLANCE_PEP8_STATUS=$?
  if [ "$GLANCE_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Glance tests failed. "
    handle_venv_results Glance glance.out.log
  fi
  if [ "$GLANCE_PEP8_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Glance pep8 failed. "
    cat glance_pep8.out.log | grep -v env=
  fi

fi

if ! is_master "$KEYSTONE_URL" "$KEYSTONE_GIT_MASTER" "$KEYSTONE_BRANCH"; then
  TESTS_RUN=$(( $TESTS_RUN + 1 ))
  if [ -n "$KEYSTONE_URL" ]; then
    get_keystone_source_git
  fi
  cd $TMP_DIR/keystone_source
  python setup.py sdist &> sdist.out || \
    { echo "Failed to create tarball."; cat sdist.out; exit 1; }
  cd dist
  tar xf keystone*.tar.gz
  rm keystone*.tar.gz
  cd keystone*
  tox -epy27 &> keystone.out.log
  local KEYSTONE_STATUS=$?
  tox -epep8 &> keystone_pep8.out.log
  local KEYSTONE_PEP8_STATUS=$?
  if [ "$KEYSTONE_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Keystone tests failed. "
    handle_venv_results Keystone keystone.out.log
  fi
  if [ "$KEYSTONE_PEP8_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Keystone pep8 failed. "
    cat keystone_pep8.out.log | grep -v env=
  fi
fi

if ! is_master "$SWIFT_URL" "$SWIFT_GIT_MASTER" "$SWIFT_BRANCH"; then

  TESTS_RUN=$(( $TESTS_RUN + 1 ))
  if [ -n "$SWIFT_URL" ]; then
    get_swift_source_git
  fi
  cd $TMP_DIR/swift_source
  python setup.py sdist &> sdist.out || \
    { echo "Failed to create tarball."; cat sdist.out; exit 1; }
  cd dist
  tar xf swift*.tar.gz
  rm swift*.tar.gz
  cd swift*
  #NOTE: temp fix for "File exists: '/tmp/swift-tests'" errors
  rm -Rf /tmp/swift-tests*
  tox -epy27 &> swift.out.log
  local SWIFT_STATUS=$?
  tox -epep8 &> swift_pep8.out.log
  local SWIFT_PEP8_STATUS=$?
  if [ "$SWIFT_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Swift tests failed. "
    handle_venv_results Swift swift.out.log
  fi
  if [ "$SWIFT_PEP8_STATUS" -ne "0" ]; then
    RETVAL=1
    MSG="${MSG}Swift pep8 failed. "
    cat swift_pep8.out.log | grep -v env=
  fi

fi

if [ $RETVAL -ne 0 ]; then
  fail "$MSG"
fi

if [ $TESTS_RUN -eq 0 ]; then
  echo "Warning: no unit tests ran!"
fi
}

run_job
