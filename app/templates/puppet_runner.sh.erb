TMP_DIR=$(mktemp -d)

# Server name within the group which will be used to build packages
export BUILD_SERVER_NAME=${BUILD_SERVER_NAME:-"login"}

# Keystone HOST (defaults to nova1)
export KEYSTONE_SERVER_NAME=${KEYSTONE_SERVER_NAME:-"nova1"}

# Glance HOST (defaults to nova1)
export GLANCE_SERVER_NAME=${GLANCE_SERVER_NAME:-"nova1"}

# Nova API HOST (defaults to nova1)
export NOVA_SERVER_NAME=${NOVA_SERVER_NAME:-"nova1"}

# Cinder API HOST (defaults to nova1)
export CINDER_SERVER_NAME=${CINDER_SERVER_NAME:-"nova1"}

# Swift API HOST (defaults to nova1)
export SWIFT_SERVER_NAME=${SWIFT_SERVER_NAME:-"nova1"}

# Neutron API HOST (defaults to nova1) (only set if neutron is enabled)
#export NEUTRON_SERVER_NAME=${NEUTRON_SERVER_NAME:-"nova1"}

# Server name within the group which will be used to build packages
export TEST_SUITE_SERVER_NAME=${TEST_SUITE_SERVER_NAME:-"nova1"}

# Set default Kytoon group type to 'libvirt'
export GROUP_TYPE=${GROUP_TYPE:-"libvirt"}

<% job.job_group.smoke_test.test_suites.each do |suite| %>
RUN_<%= suite.name %>=true
<% end %>

function copy_hosts {
# Copy hosts file to each node
rake ssh bash <<-"EOF_COPY_HOSTS"
for IP in $(cat /etc/hosts | cut -f 1); do
[[ "$IP" != "127.0.0.1" ]] && scp /etc/hosts $IP:/etc/hosts
done
EOF_COPY_HOSTS
}

function delete_group {

#for debugging purposes you can touch this file to hang the group
rake ssh bash <<-EOF_BASH
until [ ! -f /tmp/do_not_delete ]; do
    sleep 1
done
EOF_BASH
rake kytoon:delete
}

function setup {

    cd $TMP_DIR

    GIT_ASKPASS=echo \
    git_clone "<%= ENV['FIRESTACK_URL'] %>" "firestack"
    cd firestack

    cp "$SERVER_GROUP_JSON_CONF" config/server_group.json || \
        fail "Failed to copy server_group.json"

}

function run_job {

trap "{ delete_group; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
start_metric "Create Server Group"
if rake kytoon:create; then
stop_metric

    rake configure_package_mirrors

    build_packages
    if [ -n "$RUN_TORPEDO" ]; then
      rake fog:build_packages SERVER_NAME="$BUILD_SERVER_NAME" \
        || fail "Failed to build fog."
      rake torpedo:build_packages SERVER_NAME="$BUILD_SERVER_NAME" \
        || fail "Failed to build torpedo."
    fi

    # Copy hosts file to all nodes
    copy_hosts

    # Copy node configs into the project
    cp -a "$NODES_CONFIG_DIR" config/puppet-configs/smokestack
   
    rake create_package_repo SERVER_NAME="$BUILD_SERVER_NAME"
 
    start_metric "Puppet Install"
    rake puppet:install SOURCE_URL="$COOKBOOK_URL" PUPPET_CONFIG="smokestack" || fail "Puppet failed."
    stop_metric

    NEUTRON_API_ENDPOINT=${NEUTRON_SERVER_NAME:-"nova1"}
    rake keystone:configure \
        SERVER_NAME="$KEYSTONE_SERVER_NAME" \
        CINDER_HOST="$CINDER_SERVER_NAME" \
        GLANCE_HOST="$GLANCE_SERVER_NAME" \
        NOVA_HOST="$NOVA_SERVER_NAME" \
        SWIFT_HOST="$SWIFT_SERVER_NAME" \
        KEYSTONE_HOST="$KEYSTONE_SERVER_NAME" \
        NEUTRON_HOST="$NEUTRON_API_ENDPOINT" 

    start_metric "Load Glance Images"
    rake glance:load_images SERVER_NAME="$GLANCE_SERVER_NAME"
    stop_metric

    if [ -n "$NEUTRON_SERVER_NAME" ]; then
        rake neutron:configure SERVER_NAME="$NEUTRON_SERVER_NAME"
    fi
    
    #run Torpedo API tests (Uses the Ruby openstack-compute gem)
    if [ -n "$RUN_TORPEDO" ]; then
        start_metric "Torpedo"

        #setup reasonable defaults for Libvirt Torpedo runs here
        export TORPEDO_SERVER_BUILD_TIMEOUT=${TORPEDO_SERVER_BUILD_TIMEOUT:-"180"}
        export TORPEDO_SSH_TIMEOUT=${TORPEDO_SSH_TIMEOUT:-"60"}
        export TORPEDO_PING_TIMEOUT=${TORPEDO_PING_TIMEOUT:-"60"}
        export TORPEDO_TEST_REBUILD_SERVER=${TORPEDO_TEST_REBUILD_SERVER:-"true"}
        export TORPEDO_FLAVOR_REF=${TORPEDO_FLAVOR_REF:-"1"}
        export TORPEDO_IMAGE_NAME=${TORPEDO_IMAGE_NAME:-"ami-tty"}

        rake torpedo:fire SERVER_NAME="$TEST_SUITE_SERVER_NAME" || \
        { rake tail_logs; test_fail "Hit by Torpedo."; }
        stop_metric
    fi
               
    # run smoke tests
    if [ -n "$RUN_NOVA_SMOKE_TESTS" ]; then
        start_metric "Nova Smoke Tests"
        rake nova:smoke_tests_fedora \
            SERVER_NAME="$TEST_SUITE_SERVER_NAME" \
            NO_VOLUME="$SMOKE_TESTS_DISABLE_VOLUME" || \
        { rake tail_logs; test_fail "Smoke tests failed."; }
        stop_metric
    fi

    # run Tempest
    if [ -n "$RUN_TEMPEST" ]; then
        start_metric "Tempest Smoke"
        rake tempest SERVER_NAME="$TEST_SUITE_SERVER_NAME" || \
        { rake tail_logs; test_fail "Caught in a Tempest."; }
        stop_metric
    fi

    # Cache rpms all tests pass
    if [ -n "$RPM_CACHEURL" ]; then
        rake cache:fill_cache \
            CACHEURL=$RPM_CACHEURL \
            SERVER_NAME="$BUILD_SERVER_NAME"
    fi

else
    rake tail_logs
    fail "Failed to create server group."
fi

}

setup
run_job
