TMP_DIR=$(mktemp -d)

# Server name within the group which will be used to build packages
export BUILD_SERVER_NAME=${BUILD_SERVER_NAME:-"login"}

# Keystone HOST (defaults to nova1)
export KEYSTONE_SERVER_NAME=${KEYSTONE_SERVER_NAME:-"nova1"}

# Glance HOST (defaults to nova1)
export GLANCE_SERVER_NAME=${GLANCE_SERVER_NAME:-"nova1"}

# Nova API HOST (defaults to nova1)
export NOVA_SERVER_NAME=${NOVA_SERVER_NAME:-"nova1"}

# Cinder API HOST (defaults to nova1)
export CINDER_SERVER_NAME=${CINDER_SERVER_NAME:-"nova1"}

# Swift API HOST (defaults to nova1)
export SWIFT_SERVER_NAME=${SWIFT_SERVER_NAME:-"nova1"}

# Quantum API HOST (defaults to nova1) (only set if quantum is enabled)
#export QUANTUM_SERVER_NAME=${QUANTUM_SERVER_NAME:-"nova1"}

# Server name within the group which will be used to build packages
export TEST_SUITE_SERVER_NAME=${TEST_SUITE_SERVER_NAME:-"nova1"}

# Set default Kytoon group type to 'xenserver'
export GROUP_TYPE=${GROUP_TYPE:-"xenserver"}

<% job.job_group.smoke_test.test_suites.each do |suite| %>
RUN_<%= suite.name %>=true
<% end %>

function copy_hosts {
# Copy hosts file to each node
rake ssh bash <<-"EOF_COPY_HOSTS"
for IP in $(cat /etc/hosts | cut -f 1); do
[[ "$IP" != "127.0.0.1" ]] && scp /etc/hosts $IP:/etc/hosts
done
EOF_COPY_HOSTS
}

function delete_group {

#for debugging purposes you can touch this file to hang the group
rake ssh bash <<-EOF_BASH
until [ ! -f /tmp/do_not_delete ]; do
    sleep 1
done
EOF_BASH
rake kytoon:delete
}

function setup {

    cd $TMP_DIR

    GIT_ASKPASS=echo \
    git_clone "<%= ENV['FIRESTACK_URL'] %>" "firestack"
    cd firestack

    cp "$SERVER_GROUP_JSON_CONF" config/server_group.json || \
        fail "Failed to copy server_group.json"

}

function run_job {

[ -n "$XENSERVER_IP" ] || fail "Xen jobs require a XENSERVER_IP env variable."

trap "{ delete_group; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
start_metric "Create Server Group"
if rake kytoon:create GATEWAY_IP="$XENSERVER_IP"; then
stop_metric

    rake configure_package_mirrors

    build_packages
    if [ -n "$RUN_TORPEDO" ]; then
      rake fog:build_packages SERVER_NAME="$BUILD_SERVER_NAME" \
        || fail "Failed to build fog."
      rake torpedo:build_packages SERVER_NAME="$BUILD_SERVER_NAME" \
        || fail "Failed to build torpedo."
    fi

    # Copy hosts file to all nodes
    copy_hosts

    # obtain IP address of xenbr0
    XENBR0_IP=$(rake ssh 'ip a | grep xenbr0 | grep inet | sed -e "s|.*inet \([^/]*\).*|\1|"')

    # Copy node configs into the project
    cp -a "$NODES_CONFIG_DIR" config/puppet-configs/smokestack
    for FILE in $(ls config/puppet-configs/smokestack); do
        # FIXME: need to figure out how to make xenbr1 a XenServer management
        # interface.
        # For now we replace XENAPI_CONNECTION_URL with the IP of xenbr0
        sed -e "s|XENAPI_CONNECTION_URL|http://$XENBR0_IP|g" -i "config/puppet-configs/smokestack/$FILE"
        
    done
   
    rake create_package_repo SERVER_NAME="$BUILD_SERVER_NAME"

    rake xen:install_plugins SOURCE_URL="$NOVA_URL" \
                             SOURCE_BRANCH="$NOVA_BRANCH" \
                             GIT_MASTER="$NOVA_GIT_MASTER" \
                             GIT_MERGE_MASTER_BRANCH="$NOVA_GIT_MASTER_BRANCH" \
                             MERGE_MASTER="$NOVA_MERGE_MASTER" \
                             REVISION="$NOVA_REVISION"
 
    start_metric "Puppet Install"
    rake puppet:install SOURCE_URL="$COOKBOOK_URL" PUPPET_CONFIG="smokestack" || fail "Puppet failed."
    stop_metric

    QUANTUM_API_ENDPOINT=${QUANTUM_SERVER_NAME:-"nova1"}
    rake keystone:configure \
        SERVER_NAME="$KEYSTONE_SERVER_NAME" \
        CINDER_HOST="$CINDER_SERVER_NAME" \
        GLANCE_HOST="$GLANCE_SERVER_NAME" \
        NOVA_HOST="$NOVA_SERVER_NAME" \
        SWIFT_HOST="$SWIFT_SERVER_NAME" \
        KEYSTONE_HOST="$KEYSTONE_SERVER_NAME" \
        QUANTUM_HOST="$QUANTUM_API_ENDPOINT"

    rake glance:load_images_xen SERVER_NAME="$GLANCE_SERVER_NAME"

    if [ -n "$QUANTUM_SERVER_NAME" ]; then
        rake quantum:configure SERVER_NAME="$QUANTUM_SERVER_NAME"
    fi

    #reserve the first 5 IPs for the server group
    rake ssh bash <<-"EOF_RESERVE_IPS"
ssh nova1 bash <<-"EOF_NOVA1"
for NUM in {0..5}; do
nova-manage fixed reserve 192.168.0.$NUM
done
EOF_NOVA1
EOF_RESERVE_IPS
    
    #run Torpedo API tests (Uses the Ruby openstack-compute gem)
    if [ -n "$RUN_TORPEDO" ]; then
        start_metric "Torpedo"

        #setup reasonable defaults for Xen Torpedo runs here
        export TORPEDO_SERVER_BUILD_TIMEOUT=${TORPEDO_SERVER_BUILD_TIMEOUT:-"420"}
        export TORPEDO_SSH_TIMEOUT=${TORPEDO_SSH_TIMEOUT:-"60"}
        export TORPEDO_PING_TIMEOUT=${TORPEDO_PING_TIMEOUT:-"60"}
        export TORPEDO_TEST_REBUILD_SERVER=${TORPEDO_TEST_REBUILD_SERVER:-"true"}
        export TORPEDO_TEST_RESIZE_SERVER=${TORPEDO_TEST_RESIZE_SERVER:-"true"}
        export TORPEDO_TEST_ADMIN_PASSWORD=${TORPEDO_TEST_ADMIN_PASSWORD:-"true"}
        export TORPEDO_TEST_SOFT_REBOOT=${TORPEDO_TEST_SOFT_REBOOT:-"true"}
        export TORPEDO_TEST_HARD_REBOOT=${TORPEDO_TEST_HARD_REBOOT:-"true"}

        rake torpedo:fire SERVER_NAME="$TEST_SUITE_SERVER_NAME" MODE=xen || \
        { rake tail_logs; fail "Hit by Torpedo."; }
        stop_metric
    fi
               
    # run smoke tests (Not currently supported)
    #if [ -n "$RUN_NOVA_SMOKE_TESTS" ]; then
        #start_metric "Nova Smoke Tests"
        #rake nova:smoke_tests_fedora SERVER_NAME="$TEST_SUITE_SERVER_NAME" NO_VOLUME=true || \
        #{ rake tail_logs; fail "Smoke tests failed."; }
        #stop_metric
    #fi

    # run Tempest
    if [ -n "$RUN_TEMPEST" ]; then
        start_metric "Tempest Smoke"
        rake tempest SERVER_NAME="$TEST_SUITE_SERVER_NAME" || \
        { rake tail_logs; fail "Caught in a Tempest."; }
        stop_metric
    fi

    # Cache rpms all tests pass
    if [ -n "$RPM_CACHEURL" ]; then
        rake cache:fill_cache \
            CACHEURL=$RPM_CACHEURL \
            SERVER_NAME="$BUILD_SERVER_NAME"
    fi

else
    rake tail_logs
    fail "Failed to create server group."
fi

}

setup
run_job
