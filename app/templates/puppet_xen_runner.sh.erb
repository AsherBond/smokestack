TMP_DIR=$(mktemp -d)

# Server name within the group which will be used to build packages
export BUILD_SERVER_NAME=${BUILD_SERVER_NAME:-"login"}

# Keystone HOST (defaults to nova1)
export KEYSTONE_SERVER_NAME=${KEYSTONE_SERVER_NAME:-"nova1"}

# Glance HOST (defaults to nova1)
export GLANCE_SERVER_NAME=${GLANCE_SERVER_NAME:-"nova1"}

# Server name within the group which will be used to build packages
export TEST_SUITE_SERVER_NAME=${TEST_SUITE_SERVER_NAME:-"nova1"}

# Set default Kytoon group type to 'xenserver'
export GROUP_TYPE=${GROUP_TYPE:-"xenserver"}

<% job.job_group.smoke_test.test_suites.each do |suite| %>
RUN_<%= suite.name %>=true
<% end %>

function copy_hosts {
# Copy hosts file to each node
rake ssh bash <<-"EOF_COPY_HOSTS"
for IP in $(cat /etc/hosts | cut -f 1); do
[[ "$IP" != "127.0.0.1" ]] && scp /etc/hosts $IP:/etc/hosts
done
EOF_COPY_HOSTS
}

function delete_group {

#for debugging purposes you can touch this file to hang the group
rake ssh bash <<-EOF_BASH
until [ ! -f /tmp/do_not_delete ]; do
    sleep 1
done
EOF_BASH
rake kytoon:delete
}

function setup {

    cd $TMP_DIR

    GIT_ASKPASS=echo \
    git_clone "<%= ENV['FIRESTACK_URL'] %>" "firestack"
    cd firestack

    cp "$SERVER_GROUP_JSON_CONF" config/server_group.json || \
        fail "Failed to copy server_group.json"

}

function run_job {

[ -n "$XENSERVER_IP" ] || fail "Xen jobs require a XENSERVER_IP env variable."

trap "{ delete_group; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
start_metric "Create Server Group"
if rake kytoon:create GATEWAY_IP="$XENSERVER_IP"; then
stop_metric

    local NOVA_MERGE_MASTER=""
    if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
        NOVA_MERGE_MASTER="true"
    fi
    start_metric "Build Nova"
    rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        RPM_PACKAGER_URL="$NOVA_RPM_PACKAGER_URL" \
        RPM_PACKAGER_BRANCH="$NOVA_RPM_PACKAGER_BRANCH" \
        SOURCE_URL="$NOVA_URL" \
        SOURCE_BRANCH="$NOVA_BRANCH" \
        GIT_MASTER="$NOVA_GIT_MASTER" \
        GIT_MERGE_MASTER_BRANCH="$NOVA_GIT_MASTER_BRANCH" \
        MERGE_MASTER="$NOVA_MERGE_MASTER" \
        REVISION="$NOVA_REVISION" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build nova packages."
    stop_metric

    start_metric "Build Python-Novaclient"
    rake nova:build_python_novaclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$NOVACLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$NOVACLIENT_RPM_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build novaclient packages."
    stop_metric
   
    local GLANCE_MERGE_MASTER=""
    if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
        GLANCE_MERGE_MASTER="true"
    fi

    start_metric "Build Glance"
    rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        RPM_PACKAGER_URL="$GLANCE_RPM_PACKAGER_URL" \
        RPM_PACKAGER_BRANCH="$GLANCE_RPM_PACKAGER_BRANCH" \
        SOURCE_URL="$GLANCE_URL" \
        SOURCE_BRANCH="$GLANCE_BRANCH" \
        GIT_MASTER="$GLANCE_GIT_MASTER" \
        GIT_MERGE_MASTER_BRANCH="$GLANCE_GIT_MASTER_BRANCH" \
        MERGE_MASTER="$GLANCE_MERGE_MASTER" \
        REVISION="$GLANCE_REVISION" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build glance packages."
    stop_metric

    #FIXME (remove once we add this to Fedora)
    rake glance:build_python_warlock \
        SERVER_NAME="$BUILD_SERVER_NAME"

    start_metric "Build Python-Glanceclient"
    rake glance:build_python_glanceclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$GLANCECLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$GLANCECLIENT_RPM_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build glanceclient packages."
    stop_metric

    local KEYSTONE_MERGE_MASTER=""
    if [[ "$KEYSTONE_MERGE_TRUNK" == "true" ]]; then
        KEYSTONE_MERGE_MASTER="true"
    fi
    start_metric "Build Keystone"
    rake keystone:build_packages SOURCE_DIR="$TMP_DIR/keystone_source" \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        RPM_PACKAGER_URL="$KEYSTONE_RPM_PACKAGER_URL" \
        RPM_PACKAGER_BRANCH="$KEYSTONE_RPM_PACKAGER_BRANCH" \
        SOURCE_URL="$KEYSTONE_URL" \
        SOURCE_BRANCH="$KEYSTONE_BRANCH" \
        GIT_MASTER="$KEYSTONE_GIT_MASTER" \
        GIT_MERGE_MASTER_BRANCH="$KEYSTONE_GIT_MASTER_BRANCH" \
        MERGE_MASTER="$KEYSTONE_MERGE_MASTER" \
        REVISION="$KEYSTONE_REVISION" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build keystone packages."
    stop_metric

    start_metric "Build Python-Keystoneclient"
    rake keystone:build_python_keystoneclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$KEYSTONECLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$KEYSTONECLIENT_RPM_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build keystoneclient packages."
    stop_metric

    if [ -n "$BUILD_SWIFT" ]; then
        local SWIFT_MERGE_MASTER=""
        if [[ "$SWIFT_MERGE_TRUNK" == "true" ]]; then
            SWIFT_MERGE_MASTER="true"
        fi
        start_metric "Build Swift"
        rake swift:build_packages SOURCE_DIR="$TMP_DIR/swift_source" \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            RPM_PACKAGER_URL="$SWIFT_RPM_PACKAGER_URL" \
            RPM_PACKAGER_BRANCH="$SWIFT_RPM_PACKAGER_BRANCH" \
            SOURCE_URL="$SWIFT_URL" \
            SOURCE_BRANCH="$SWIFT_BRANCH" \
            GIT_MASTER="$SWIFT_GIT_MASTER" \
            GIT_MERGE_MASTER_BRANCH="$SWIFT_GIT_MASTER_BRANCH" \
            MERGE_MASTER="$SWIFT_MERGE_MASTER" \
            REVISION="$SWIFT_REVISION" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build swift packages."
        stop_metric

        start_metric "Build Python-Swiftclient"
        rake swift:build_python_swiftclient \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            SOURCE_URL="$SWIFTCLIENT_GIT_MASTER" \
            RPM_PACKAGER_URL="$SWIFTCLIENT_RPM_PACKAGER_URL" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build swiftclient packages."
        stop_metric

    fi

    if [ -n "$BUILD_CINDER" ]; then
        local CINDER_MERGE_MASTER=""
        if [[ "$CINDER_MERGE_TRUNK" == "true" ]]; then
            CINDER_MERGE_MASTER="true"
        fi
        start_metric "Build Cinder"
        rake cinder:build_packages SOURCE_DIR="$TMP_DIR/cinder_source" \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            RPM_PACKAGER_URL="$CINDER_RPM_PACKAGER_URL" \
            RPM_PACKAGER_BRANCH="$CINDER_RPM_PACKAGER_BRANCH" \
            SOURCE_URL="$CINDER_URL" \
            SOURCE_BRANCH="$CINDER_BRANCH" \
            GIT_MASTER="$CINDER_GIT_MASTER" \
            GIT_MERGE_MASTER_BRANCH="$CINDER_GIT_MASTER_BRANCH" \
            MERGE_MASTER="$CINDER_MERGE_MASTER" \
            REVISION="$CINDER_REVISION" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build cinder packages."
        stop_metric

        start_metric "Build Python-Cinderclient"
        rake cinder:build_python_cinderclient \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            SOURCE_URL="$CINDERCLIENT_GIT_MASTER" \
            RPM_PACKAGER_URL="$CINDERCLIENT_RPM_PACKAGER_URL" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build cinderclient packages."
        stop_metric

    fi

    # Prettytable 0.6 is not in stock Fedora 17
    rake fedora:build_python_prettytable \
        SERVER_NAME="$BUILD_SERVER_NAME"

    if [ -n "$BUILD_QUANTUM" ]; then
        local QUANTUM_MERGE_MASTER=""
        if [[ "$QUANTUM_MERGE_TRUNK" == "true" ]]; then
            QUANTUM_MERGE_MASTER="true"
        fi
        start_metric "Build Quantum"
        rake quantum:build_packages SOURCE_DIR="$TMP_DIR/quantum_source" \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            RPM_PACKAGER_URL="$QUANTUM_RPM_PACKAGER_URL" \
            RPM_PACKAGER_BRANCH="$QUANTUM_RPM_PACKAGER_BRANCH" \
            SOURCE_URL="$QUANTUM_URL" \
            SOURCE_BRANCH="$QUANTUM_BRANCH" \
            GIT_MASTER="$QUANTUM_GIT_MASTER" \
            GIT_MERGE_MASTER_BRANCH="$QUANTUM_GIT_MASTER_BRANCH" \
            MERGE_MASTER="$QUANTUM_MERGE_MASTER" \
            REVISION="$QUANTUM_REVISION" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build quantum packages."
        stop_metric

        start_metric "Build Python-Quantumclient"
        rake quantum:build_python_quantumclient \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            SOURCE_URL="$QUANTUMCLIENT_GIT_MASTER" \
            RPM_PACKAGER_URL="$QUANTUMCLIENT_RPM_PACKAGER_URL" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build quantumclient packages."
        stop_metric

    fi

    # Copy hosts file to all nodes
    copy_hosts

    # obtain IP address of xenbr0
    XENBR0_IP=$(rake ssh 'ip a | grep xenbr0 | grep inet | sed -e "s|.*inet \([^/]*\).*|\1|"')

    # Copy node configs into the project and write out config.yml
    cp -a "$NODES_CONFIG_DIR" config/puppet-configs/smokestack
    echo "nodes:" > config.yml
    for FILE in $(ls config/puppet-configs/smokestack); do
        echo "    - name: $FILE" >> config.yml
        echo "      manifest: $FILE" >> config.yml

        # FIXME: need to figure out how to make xenbr1 a XenServer management
        # interface.
        # For now we replace XENAPI_CONNECTION_URL with the IP of xenbr0
        sed -e "s|XENAPI_CONNECTION_URL|http://$XENBR0_IP|g" -i "config/puppet-configs/smokestack/$FILE"
        
    done
    cat config.yml
    mv config.yml config/puppet-configs/smokestack/config.yml
    cp -a config/puppet-configs/smokestack /tmp/smokestack-config
   
    rake fedora:create_rpm_repo SERVER_NAME="$BUILD_SERVER_NAME"

    rake xen:install_plugins SOURCE_URL="$NOVA_URL" \
                             SOURCE_BRANCH="$NOVA_BRANCH" \
                             GIT_MASTER="$NOVA_GIT_MASTER" \
                             GIT_MERGE_MASTER_BRANCH="$NOVA_GIT_MASTER_BRANCH" \
                             MERGE_MASTER="$NOVA_MERGE_MASTER" \
                             REVISION="$NOVA_REVISION"
 
    start_metric "Puppet Install"
    rake puppet:install SOURCE_URL="$COOKBOOK_URL" PUPPET_CONFIG="smokestack" --trace
    stop_metric

    rake keystone:configure SERVER_NAME="$KEYSTONE_SERVER_NAME"

    rake glance:load_images_xen SERVER_NAME="$GLANCE_SERVER_NAME"

    if [ -n "$QUANTUM_SERVER_NAME" ]; then
        rake quantum:configure SERVER_NAME="$QUANTUM_SERVER_NAME"
    fi

    #reserve the first 5 IPs for the server group
    rake ssh bash <<-"EOF_RESERVE_IPS"
ssh nova1 bash <<-"EOF_NOVA1"
for NUM in {0..5}; do
nova-manage fixed reserve 192.168.0.$NUM
done
EOF_NOVA1
EOF_RESERVE_IPS
    
    #run Torpedo API tests (Uses the Ruby openstack-compute gem)
    if [ -n "$RUN_TORPEDO" ]; then
        start_metric "Torpedo"
        rake torpedo SERVER_NAME="$TEST_SUITE_SERVER_NAME" MODE=xen || \
        { rake tail_logs; fail "Hit by Torpedo."; }
        stop_metric
    fi
               
    # run smoke tests (Not currently supported)
    #if [ -n "$RUN_NOVA_SMOKE_TESTS" ]; then
        #start_metric "Nova Smoke Tests"
        #rake nova:smoke_tests_fedora SERVER_NAME="$TEST_SUITE_SERVER_NAME" NO_VOLUME=true || \
        #{ rake tail_logs; fail "Smoke tests failed."; }
        #stop_metric
    #fi

    # run Tempest
    if [ -n "$RUN_TEMPEST" ]; then
        start_metric "Tempest Smoke"
        rake tempest SERVER_NAME="$TEST_SUITE_SERVER_NAME" || \
        { rake tail_logs; fail "Caught in a Tempest."; }
        stop_metric
    fi

    # Cache rpms all tests pass
    if [ -n "$RPM_CACHEURL" ]; then
        rake fedora:fill_cache \
            CACHEURL=$RPM_CACHEURL \
            SERVER_NAME="$BUILD_SERVER_NAME"
    fi

else
    rake tail_logs
    fail "Failed to create server group."
fi

}

setup
run_job
