#Global Chef settings
export CHEF_TIMEOUT=900
export CHEF_RESTART_ON_FAILURE="true"
TMP_DIR=$(mktemp -d)

<% job.job_group.smoke_test.test_suites.each do |suite| %>
RUN_<%= suite.name %>=true
<% end %>

function copy_hosts {
# Copy hosts file to each node
rake ssh bash <<-"EOF_COPY_HOSTS"
for IP in $(cat /etc/hosts | cut -f 1); do
[[ "$IP" != "127.0.0.1" ]] && scp /etc/hosts $IP:/etc/hosts
done
EOF_COPY_HOSTS
}

function delete_group {
	XEN_DISCONNECT=$1

	#for debugging purposes you can touch this file to hang the group
	rake ssh bash <<-EOF_BASH
	until [ ! -f /tmp/do_not_delete ]; do
		sleep 1
	done
	EOF_BASH

	[ -n "$XEN_DISCONNECT" ] && rake xen:disconnect
	rake group:delete
}

function setup {

	chef-vpc-toolkit -v || \
		fail "Please install the Chef VPC Toolkit."

	cd $TMP_DIR
	if [ -n "$NOVA_URL" ]; then
		if [[ ${NOVA_URL:0:2} == "lp" ]]; then
			get_nova_source_bzr
		else	
			get_nova_source_git
		fi
	fi

	if [ -n "$KEYSTONE_URL" ]; then
		if [[ ${KEYSTONE_URL:0:2} == "lp" ]]; then
			get_keystone_source_bzr
		else	
			get_keystone_source_git
		fi
	fi

	if [ -n "$GLANCE_URL" ]; then
		if [[ ${GLANCE_URL:0:2} == "lp" ]]; then
			get_glance_source_bzr
		else	
			get_glance_source_git
		fi
	fi

		GIT_ASKPASS=echo \
		git clone <%= ENV['OPENSTACK_VPC_URL'] %> openstack_vpc && \
		cd openstack_vpc || \
		fail "Failed to checkout openstack VPC."

	cp "$CHEF_INSTALLER_CONF" config/chef_installer.yml || \
		fail "Failed to copy chef_installer.yml"

	cp "$NODES_JSON_CONF" config/nodes.json || \
		fail "Failed to copy nodes.json"

	cp "$SERVER_GROUP_JSON_CONF" config/server_group.json || \
		fail "Failed to copy server_group.json"

	rake chef:validate_json || fail "Invalid JSON config file(s).";

}

function run_job {

trap "{ delete_group; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
if rake group:create && rake group:poll; then

	rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
		DEB_PACKAGER_URL="$NOVA_DEB_PACKAGER_URL" || \
		RPM_PACKAGER_URL="$NOVA_RPM_PACKAGER_URL" || \
		fail "Failed to build nova packages."

	rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
		DEB_PACKAGER_URL="$GLANCE_DEB_PACKAGER_URL" || \
		RPM_PACKAGER_URL="$GLANCE_RPM_PACKAGER_URL" || \
		fail "Failed to build glance packages."

	rake keystone:build_packages SOURCE_DIR="$TMP_DIR/keystone_source" \
		DEB_PACKAGER_URL="$KEYSTONE_DEB_PACKAGER_URL" || \
		RPM_PACKAGER_URL="$KEYSTONE_RPM_PACKAGER_URL" || \
		fail "Failed to build keystone packages."

	# install Chef and the Chef Cookbooks
	copy_hosts
	rake chef:push_repos && rake chef:install || \
		{ rake tail_logs; fail "Failed to install Chef server."; }

	# poll for Chef clients to finish runnings
	rake chef:poll_clients || \
		{ rake tail_logs; fail "Chef client timeout."; }

	# run Torpedo API tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_TORPEDO" ]; then
	rake torpedo SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "Hit by Torpedo."; }
	fi

	# run OS API v1.0 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V10" ]; then
	rake nova:ruby_osapi_tests SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "OS API tests failed."; }
	fi

	# run OS API v1.1 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V11" ]; then
	rake nova:ruby_osapi_v11_tests SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "OS API tests failed."; }
	fi

	# run smoke tests
	if [ -n "$RUN_NOVA_SMOKE_TESTS" ]; then
	rake nova:smoke_tests SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "Smoke tests failed."; }
	fi

	# run stacktester
	if [ -n "$RUN_STACK_TESTER" ]; then
	rake nova:stacktester SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "Stacktester failed."; }
	fi

else
	rake tail_logs
	fail "Failed to create server group."
fi

}

function run_xen_hybrid_job {

[ -n "$SERVER_IP_LIST" ] || fail "Xen jobs require a SERVER_IP_LIST env variable."

trap "{ delete_group 'xen_discon'; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
if rake group:create && rake group:poll; then

	rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
		DEB_PACKAGER_URL="$NOVA_DEB_PACKAGER_URL" || \
		RPM_PACKAGER_URL="$NOVA_RPM_PACKAGER_URL" || \
		fail "Failed to build nova packages."

	rake nova:build_rpms SOURCE_DIR="$TMP_DIR/nova_source" || \
		fail "Failed to build Xen plugin RPMs."

	rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
		DEB_PACKAGER_URL="$GLANCE_DEB_PACKAGER_URL" || \
		RPM_PACKAGER_URL="$GLANCE_RPM_PACKAGER_URL" || \
		fail "Failed to build glance packages."

	rake keystone:build_packages SOURCE_DIR="$TMP_DIR/keystone_source" \
		DEB_PACKAGER_URL="$KEYSTONE_DEB_PACKAGER_URL" || \
		RPM_PACKAGER_URL="$KEYSTONE_RPM_PACKAGER_URL" || \
		fail "Failed to build keystone packages."

	# install Chef and the Chef Cookbooks
	copy_hosts
	rake chef:push_repos && rake chef:install || \
		{ rake tail_logs; fail "Failed to install Chef server."; }

	# Bootstrap all the Xen Servers
	local COUNT=0
	for SERVER_IP in $SERVER_IP_LIST; do
		COUNT=$(($COUNT + 1))
		local SERVER_NAME="xen$COUNT"
		rake xen:bootstrap XENSERVER_IP=$SERVER_IP SERVER_NAME=$SERVER_NAME || \
			fail "Failed to connect Xen Server: $SERVER_NAME to VPN group."
		sleep 10
		copy_hosts
		rake chef:install SERVER_NAME=$SERVER_NAME || \
			fail "Failed to install Chef on $SERVER_NAME."
	done

	#FIXME: this can come out when compute1.vpc gets a proper domain name
	rake chef:poll_clients SERVER_NAME=nova1 || \
		{ rake tail_logs SERVER_NAME=nova1; fail "Chef client timeout: nova1"; }

	# Poll Xen Servers to finish Chef'ing
	COUNT=0
	for SERVER_IP in $SERVER_IP_LIST; do
		COUNT=$(($COUNT + 1))
		local SERVER_NAME="xen$COUNT"
		local COMPUTE_NAME="compute$COUNT"
		rake chef:poll_clients SERVER_NAME=$SERVER_NAME || \
			{ rake tail_logs SERVER_NAME=$SERVER_NAME; fail "Chef client timeout: $SERVER_NAME"; }
		rake ssh bash <<-EOF_BASH
		if ! grep -c "$COMPUTE_NAME.vpc" /etc/hosts &> /dev/null; then
		echo "172.19.0.10$COUNT	$COMPUTE_NAME.vpc	$COMPUTE_NAME" >> /etc/hosts
		fi
		EOF_BASH
		copy_hosts
		rake chef:install SERVER_NAME=$COMPUTE_NAME || \
			fail "Failed to install Chef on $COMPUTE_NAME."
	done

	# Poll Compute nodes (dom0) to finish Chef'ing
	COUNT=0
	for SERVER_IP in $SERVER_IP_LIST; do
		COUNT=$(($COUNT + 1))
		# NOTE: we put .vpc on these because the agent doesn't seem to
		# set the domain name correctly
		local COMPUTE_NAME="compute$COUNT.vpc"
		rake chef:poll_clients SERVER_NAME=$COMPUTE_NAME || \
			{ rake tail_logs SERVER_NAME=$COMPUTE_NAME; fail "Chef client timeout: $COMPUTE_NAME"; }
	done

	# run Torpedo API tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_TORPEDO" ]; then
	rake torpedo SERVER_NAME=nova1 MODE=xen || \
		{ rake tail_logs; fail "Hit by Torpedo."; }
	fi

	# run OS API v1.0 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V10" ]; then
	rake nova:ruby_osapi_tests SERVER_NAME=nova1 MODE=xen || \
		{ rake tail_logs; fail "OS API tests failed."; }
	fi

	# run OS API v1.1 tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_RUBY_OSAPI_V11" ]; then
	rake nova:ruby_osapi_v11_tests SERVER_NAME=nova1 MODE=xen || \
		{ rake tail_logs; fail "OS API tests failed."; }
	fi

	# run stacktester
	if [ -n "$RUN_STACK_TESTER" ]; then
	rake nova:stacktester SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "Stacktester failed."; }
	fi

else
	rake tail_logs
	fail "Failed to create server group."
fi

}

setup
<% if job.type == Job::CHEF_VPC_XEN %>
run_xen_hybrid_job
<% else %>
run_job
<% end %>
