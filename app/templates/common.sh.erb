#!/bin/bash
CUSTOM_ENV_FILE=${1}
source $CUSTOM_ENV_FILE

NOVA_URL=${2}
NOVA_BRANCH=${3}
NOVA_MERGE_TRUNK=${4}
NOVA_REVISION=${5}
NOVA_PACKAGER_URL=${6:-$NOVA_PACKAGER_URL}
NOVA_PACKAGER_BRANCH=${7:-$NOVA_PACKAGER_BRANCH}

KEYSTONE_URL=${8}
KEYSTONE_BRANCH=${9}
KEYSTONE_MERGE_TRUNK=${10}
KEYSTONE_REVISION=${11}
KEYSTONE_PACKAGER_URL=${12:-$KEYSTONE_PACKAGER_URL}
KEYSTONE_PACKAGER_BRANCH=${13:-$KEYSTONE_PACKAGER_BRANCH}

GLANCE_URL=${14}
GLANCE_BRANCH=${15}
GLANCE_MERGE_TRUNK=${16}
GLANCE_REVISION=${17}
GLANCE_PACKAGER_URL=${18:-$GLANCE_PACKAGER_URL}
GLANCE_PACKAGER_BRANCH=${19:-$GLANCE_PACKAGER_BRANCH}

SWIFT_URL=${20}
SWIFT_BRANCH=${21}
SWIFT_MERGE_TRUNK=${22}
SWIFT_REVISION=${23}
SWIFT_PACKAGER_URL=${24:-$SWIFT_PACKAGER_URL}
SWIFT_PACKAGER_BRANCH=${25:-$SWIFT_PACKAGER_BRANCH}

CINDER_URL=${26}
CINDER_BRANCH=${27}
CINDER_MERGE_TRUNK=${28}
CINDER_REVISION=${29}
CINDER_PACKAGER_URL=${30:-$CINDER_PACKAGER_URL}
CINDER_PACKAGER_BRANCH=${31:-$CINDER_PACKAGER_BRANCH}

QUANTUM_URL=${32}
QUANTUM_BRANCH=${33}
QUANTUM_MERGE_TRUNK=${34}
QUANTUM_REVISION=${35}
QUANTUM_PACKAGER_URL=${36:-$QUANTUM_PACKAGER_URL}
QUANTUM_PACKAGER_BRANCH=${37:-$QUANTUM_PACKAGER_BRANCH}

CONFIG_TEMPLATE_DESCRIPTION=${38}
COOKBOOK_URL=${39}
NODES_CONFIG_DIR=${40}
SERVER_GROUP_JSON_CONF=${41}

# Setup default branches to merge if MERGE_TRUNK is checked
# These may be overridden by some environements
NOVA_GIT_MASTER_BRANCH=${NOVA_GIT_MASTER_BRANCH:-"master"}
GLANCE_GIT_MASTER_BRANCH=${GLANCE_GIT_MASTER_BRANCH:-"master"}
KEYSTONE_GIT_MASTER_BRANCH=${KEYSTONE_GIT_MASTER_BRANCH:-"master"}
SWIFT_GIT_MASTER_BRANCH=${SWIFT_GIT_MASTER_BRANCH:-"master"}
CINDER_GIT_MASTER_BRANCH=${CINDER_GIT_MASTER_BRANCH:-"master"}
QUANTUM_GIT_MASTER_BRANCH=${QUANTUM_GIT_MASTER_BRANCH:-"master"}

# Setup default packager branches
# These may be overridden by some environements
NOVA_PACKAGER_BRANCH=${NOVA_PACKAGER_BRANCH:-"master"}
GLANCE_PACKAGER_BRANCH=${GLANCE_PACKAGER_BRANCH:-"master"}
KEYSTONE_PACKAGER_BRANCH=${KEYSTONE_PACKAGER_BRANCH:-"master"}
SWIFT_PACKAGER_BRANCH=${SWIFT_PACKAGER_BRANCH:-"master"}
CINDER_PACKAGER_BRANCH=${CINDER_PACKAGER_BRANCH:-"master"}
QUANTUM_PACKAGER_BRANCH=${QUANTUM_PACKAGER_BRANCH:-"master"}

GIT_CACHE_DIR=${GIT_CACHE_DIR:-"$HOME/.smokestack_git_cache"}

# Log to the job log and stdout
function fail {
	local MSG=$1
	echo "FAILURE_MSG=$MSG"
	exit 1
}

function git_clone {
	local URL=${1:?"Please specify a URL."}
	local DIR=${2:?"Please specify a DIR."}
	local SHORT_REPO_NAME=${URL/#*\/}
	local URLSHA=$(echo \"$URL\" | sha1sum | cut -f 1 -d ' ')
	local CACHE_DIR="${GIT_CACHE_DIR}/${SHORT_REPO_NAME}-${URLSHA}"
	[ -d "$GIT_CACHE_DIR" ] || mkdir -p "$GIT_CACHE_DIR"
	if [ -d "$CACHE_DIR" ]; then
		echo "Using git repository cache..."
		pushd "$CACHE_DIR"
		git pull origin master
		popd
		cp -a "$CACHE_DIR" "$DIR"
	else
		local COUNT=1
		echo "Git cloning: $URL"
		until GIT_ASKPASS=echo git clone "$URL" "$DIR"; do
			[ "$COUNT" -eq "4" ] && fail "Failed to clone: $URL"
			sleep $(( $COUNT * 5 ))
			COUNT=$(( $COUNT + 1 ))
		done
		cp -a "$DIR" "$CACHE_DIR"
	fi
}

function get_nova_source_git {

        start_metric "Git Clone Nova"
	git_clone "$NOVA_GIT_MASTER" "nova_source"
        stop_metric
	pushd nova_source
	git fetch $NOVA_URL $NOVA_BRANCH || \
		fail "Failed to git fetch branch $NOVA_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$NOVA_REVISION" ]; then
		git checkout $NOVA_REVISION || \
			fail "Failed to revert to revision $NOVA_REVISION."
	else
		NOVA_REVISION=$(git rev-parse --short HEAD)
		[ -z "$NOVA_REVISION" ] && \
			fail "Failed to obtain nova revision from git."
	fi
	echo "NOVA_REVISION=$NOVA_REVISION"

	if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
		git merge $NOVA_GIT_MASTER_BRANCH || fail "Failed to merge $NOVA_GIT_MASTER_BRANCH."
	fi

	popd
}

function get_keystone_source_git {

        start_metric "Git Clone Keystone"
	git_clone "$KEYSTONE_GIT_MASTER" "keystone_source"
        stop_metric
	pushd keystone_source
	git fetch $KEYSTONE_URL $KEYSTONE_BRANCH || \
		fail "Failed to git fetch branch $KEYSTONE_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$KEYSTONE_REVISION" ]; then
		git checkout $KEYSTONE_REVISION || \
			fail "Failed to revert to revision $KEYSTONE_REVISION."
	else
		KEYSTONE_REVISION=$(git rev-parse --short HEAD)
		[ -z "$KEYSTONE_REVISION" ] && \
			fail "Failed to obtain keystone revision from git."
	fi
	echo "KEYSTONE_REVISION=$KEYSTONE_REVISION"

	if [[ "$KEYSTONE_MERGE_TRUNK" == "true" ]]; then
		git merge $KEYSTONE_GIT_MASTER_BRANCH || fail "Failed to merge $KEYSTONE_GIT_MASTER_BRANCH."
	fi

	popd
}

function get_glance_source_git {

        start_metric "Git Clone Glance"
	git_clone "$GLANCE_GIT_MASTER" "glance_source"
        stop_metric
	pushd glance_source
	git fetch $GLANCE_URL $GLANCE_BRANCH || \
		fail "Failed to git fetch branch $GLANCE_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$GLANCE_REVISION" ]; then
		git checkout $GLANCE_REVISION || \
			fail "Failed to revert to revision $GLANCE_REVISION."
	else
		GLANCE_REVISION=$(git rev-parse --short HEAD)
		[ -z "$GLANCE_REVISION" ] && \
			fail "Failed to obtain glance revision from git."
	fi
	echo "GLANCE_REVISION=$GLANCE_REVISION"

	if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
		git merge $GLANCE_GIT_MASTER_BRANCH || fail "Failed to merge $GLANCE_GIT_MASTER_BRANCH."
	fi

	popd

}

function get_swift_source_git {

        start_metric "Git Clone Swift"
	git_clone "$SWIFT_GIT_MASTER" "swift_source"
        stop_metric
	pushd swift_source
	git fetch $SWIFT_URL $SWIFT_BRANCH || \
		fail "Failed to git fetch branch $SWIFT_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$SWIFT_REVISION" ]; then
		git checkout $SWIFT_REVISION || \
			fail "Failed to revert to revision $SWIFT_REVISION."
	else
		SWIFT_REVISION=$(git rev-parse --short HEAD)
		[ -z "$SWIFT_REVISION" ] && \
			fail "Failed to obtain swift revision from git."
	fi
	echo "SWIFT_REVISION=$SWIFT_REVISION"

	if [[ "$SWIFT_MERGE_TRUNK" == "true" ]]; then
		git merge $SWIFT_GIT_MASTER_BRANCH || fail "Failed to merge $SWIFT_GIT_MASTER_BRANCH."
	fi

	popd

}

function get_cinder_source_git {

        start_metric "Git Clone Cinder"
	git_clone "$CINDER_GIT_MASTER" "cinder_source"
        stop_metric
	pushd cinder_source
	git fetch $CINDER_URL $CINDER_BRANCH || \
		fail "Failed to git fetch branch $CINDER_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$CINDER_REVISION" ]; then
		git checkout $CINDER_REVISION || \
			fail "Failed to revert to revision $CINDER_REVISION."
	else
		CINDER_REVISION=$(git rev-parse --short HEAD)
		[ -z "$CINDER_REVISION" ] && \
			fail "Failed to obtain cinder revision from git."
	fi
	echo "CINDER_REVISION=$CINDER_REVISION"

	if [[ "$CINDER_MERGE_TRUNK" == "true" ]]; then
		git merge $CINDER_GIT_MASTER_BRANCH || fail "Failed to merge $CINDER_GIT_MASTER_BRANCH."
	fi

	popd

}

function get_quantum_source_git {

        start_metric "Git Clone Quantum"
	git_clone "$QUANTUM_GIT_MASTER" "quantum_source"
        stop_metric
	pushd quantum_source
	git fetch $QUANTUM_URL $QUANTUM_BRANCH || \
		fail "Failed to git fetch branch $QUANTUM_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$QUANTUM_REVISION" ]; then
		git checkout $QUANTUM_REVISION || \
			fail "Failed to revert to revision $QUANTUM_REVISION."
	else
		QUANTUM_REVISION=$(git rev-parse --short HEAD)
		[ -z "$QUANTUM_REVISION" ] && \
			fail "Failed to obtain quantum revision from git."
	fi
	echo "QUANTUM_REVISION=$QUANTUM_REVISION"

	if [[ "$QUANTUM_MERGE_TRUNK" == "true" ]]; then
		git merge $QUANTUM_GIT_MASTER_BRANCH || fail "Failed to merge $QUANTUM_GIT_MASTER_BRANCH."
	fi

	popd

}

export METRIC_START_TIME=""
export METRIC_NAME=""
export METRIC_SOURCE="" #defaults to hostname

function start_metric {
	METRIC_NAME=$(echo "$1" | sed -e 's|[\ \///:]|_|g')
        if [ -n "$2" ]; then
	    METRIC_SOURCE=$(echo "$2" | sed -e 's|[\ \///:]|_|g')
        elif [ -n "$CONFIG_TEMPLATE_DESCRIPTION" ]; then
	    METRIC_SOURCE=$(echo "$CONFIG_TEMPLATE_DESCRIPTION" | sed -e 's|[\ \///:]|_|g')
        else
	    METRIC_SOURCE="$HOSTNAME"
        fi
	METRIC_START_TIME=$(date +%s)
}

function stop_metric {
        if [ -n "$METRIC_START_TIME" ]; then
	  local END_TIME=$(date +%s)
	  local TOTAL_TIME="$(($END_TIME - $METRIC_START_TIME))"
          if [ -n "$METRIC_NAME" ]; then
	      echo "$END_TIME:$TOTAL_TIME:$METRIC_NAME:$METRIC_SOURCE" >> <%= ENV['METRICS_DATA_FILE'] %>
          fi
        fi
	METRIC_START_TIME=""
	METRIC_NAME=""
	METRIC_SOURCE=""
}

function build_packages {

    local NOVA_MERGE_MASTER=""
    if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
        NOVA_MERGE_MASTER="true"
    fi
    start_metric "Build Nova"
    rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        RPM_PACKAGER_URL="$NOVA_PACKAGER_URL" \
        RPM_PACKAGER_BRANCH="$NOVA_PACKAGER_BRANCH" \
        SOURCE_URL="$NOVA_URL" \
        SOURCE_BRANCH="$NOVA_BRANCH" \
        GIT_MASTER="$NOVA_GIT_MASTER" \
        GIT_MERGE_MASTER_BRANCH="$NOVA_GIT_MASTER_BRANCH" \
        MERGE_MASTER="$NOVA_MERGE_MASTER" \
        REVISION="$NOVA_REVISION" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build nova packages."
    stop_metric

    start_metric "Build Python-Novaclient"
    rake nova:build_python_novaclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$NOVACLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$NOVACLIENT_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build novaclient packages."
    stop_metric
   
    local GLANCE_MERGE_MASTER=""
    if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
        GLANCE_MERGE_MASTER="true"
    fi

    start_metric "Build Glance"
    rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        RPM_PACKAGER_URL="$GLANCE_PACKAGER_URL" \
        RPM_PACKAGER_BRANCH="$GLANCE_PACKAGER_BRANCH" \
        SOURCE_URL="$GLANCE_URL" \
        SOURCE_BRANCH="$GLANCE_BRANCH" \
        GIT_MASTER="$GLANCE_GIT_MASTER" \
        GIT_MERGE_MASTER_BRANCH="$GLANCE_GIT_MASTER_BRANCH" \
        MERGE_MASTER="$GLANCE_MERGE_MASTER" \
        REVISION="$GLANCE_REVISION" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build glance packages."
    stop_metric

    start_metric "Build Python-Glanceclient"
    rake glance:build_python_glanceclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$GLANCECLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$GLANCECLIENT_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build glanceclient packages."
    stop_metric

    local KEYSTONE_MERGE_MASTER=""
    if [[ "$KEYSTONE_MERGE_TRUNK" == "true" ]]; then
        KEYSTONE_MERGE_MASTER="true"
    fi
    start_metric "Build Keystone"
    rake keystone:build_packages SOURCE_DIR="$TMP_DIR/keystone_source" \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        RPM_PACKAGER_URL="$KEYSTONE_PACKAGER_URL" \
        RPM_PACKAGER_BRANCH="$KEYSTONE_PACKAGER_BRANCH" \
        SOURCE_URL="$KEYSTONE_URL" \
        SOURCE_BRANCH="$KEYSTONE_BRANCH" \
        GIT_MASTER="$KEYSTONE_GIT_MASTER" \
        GIT_MERGE_MASTER_BRANCH="$KEYSTONE_GIT_MASTER_BRANCH" \
        MERGE_MASTER="$KEYSTONE_MERGE_MASTER" \
        REVISION="$KEYSTONE_REVISION" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build keystone packages."
    stop_metric

    start_metric "Build Python-Keystoneclient"
    rake keystone:build_python_keystoneclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$KEYSTONECLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$KEYSTONECLIENT_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build keystoneclient packages."
    stop_metric

    if [ -n "$BUILD_SWIFT" ]; then
        local SWIFT_MERGE_MASTER=""
        if [[ "$SWIFT_MERGE_TRUNK" == "true" ]]; then
            SWIFT_MERGE_MASTER="true"
        fi
        start_metric "Build Swift"
        rake swift:build_packages SOURCE_DIR="$TMP_DIR/swift_source" \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            RPM_PACKAGER_URL="$SWIFT_PACKAGER_URL" \
            RPM_PACKAGER_BRANCH="$SWIFT_PACKAGER_BRANCH" \
            SOURCE_URL="$SWIFT_URL" \
            SOURCE_BRANCH="$SWIFT_BRANCH" \
            GIT_MASTER="$SWIFT_GIT_MASTER" \
            GIT_MERGE_MASTER_BRANCH="$SWIFT_GIT_MASTER_BRANCH" \
            MERGE_MASTER="$SWIFT_MERGE_MASTER" \
            REVISION="$SWIFT_REVISION" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build swift packages."
        stop_metric

    fi

    start_metric "Build Python-Swiftclient"
    rake swift:build_python_swiftclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$SWIFTCLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$SWIFTCLIENT_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build swiftclient packages."
    stop_metric

    if [ -n "$BUILD_CINDER" ]; then
        local CINDER_MERGE_MASTER=""
        if [[ "$CINDER_MERGE_TRUNK" == "true" ]]; then
            CINDER_MERGE_MASTER="true"
        fi
        start_metric "Build Cinder"
        rake cinder:build_packages SOURCE_DIR="$TMP_DIR/cinder_source" \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            RPM_PACKAGER_URL="$CINDER_PACKAGER_URL" \
            RPM_PACKAGER_BRANCH="$CINDER_PACKAGER_BRANCH" \
            SOURCE_URL="$CINDER_URL" \
            SOURCE_BRANCH="$CINDER_BRANCH" \
            GIT_MASTER="$CINDER_GIT_MASTER" \
            GIT_MERGE_MASTER_BRANCH="$CINDER_GIT_MASTER_BRANCH" \
            MERGE_MASTER="$CINDER_MERGE_MASTER" \
            REVISION="$CINDER_REVISION" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build cinder packages."
        stop_metric

    fi

    start_metric "Build Python-Cinderclient"
    rake cinder:build_python_cinderclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$CINDERCLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$CINDERCLIENT_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build cinderclient packages."
    stop_metric


    if [ -n "$BUILD_QUANTUM" ]; then
        local QUANTUM_MERGE_MASTER=""
        if [[ "$QUANTUM_MERGE_TRUNK" == "true" ]]; then
            QUANTUM_MERGE_MASTER="true"
        fi
        start_metric "Build Quantum"
        rake quantum:build_packages SOURCE_DIR="$TMP_DIR/quantum_source" \
            SERVER_NAME="$BUILD_SERVER_NAME" \
            RPM_PACKAGER_URL="$QUANTUM_PACKAGER_URL" \
            RPM_PACKAGER_BRANCH="$QUANTUM_PACKAGER_BRANCH" \
            SOURCE_URL="$QUANTUM_URL" \
            SOURCE_BRANCH="$QUANTUM_BRANCH" \
            GIT_MASTER="$QUANTUM_GIT_MASTER" \
            GIT_MERGE_MASTER_BRANCH="$QUANTUM_GIT_MASTER_BRANCH" \
            MERGE_MASTER="$QUANTUM_MERGE_MASTER" \
            REVISION="$QUANTUM_REVISION" \
            CACHEURL="$RPM_CACHEURL" \
            || fail "Failed to build quantum packages."
        stop_metric
    fi

    start_metric "Build Python-Quantumclient"
    rake quantum:build_python_quantumclient \
        SERVER_NAME="$BUILD_SERVER_NAME" \
        SOURCE_URL="$QUANTUMCLIENT_GIT_MASTER" \
        RPM_PACKAGER_URL="$QUANTUMCLIENT_PACKAGER_URL" \
        CACHEURL="$RPM_CACHEURL" \
        || fail "Failed to build quantumclient packages."
    stop_metric

    # distro agnostic hook to build custom required packages for upstream
    start_metric "Build Misc"
    rake build_misc SERVER_NAME="$BUILD_SERVER_NAME" \
        || fail "Failed to build misc packages."
    stop_metric

}

if [ ! -f ~/.gitconfig ]; then
cat > ~/.gitconfig <<-EOF_GIT_CONFIG_CAT
[user]
        name = SmokeStack
        email = smokestack@openstack.org
EOF_GIT_CONFIG_CAT
fi
