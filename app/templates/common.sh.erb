#!/bin/bash


CUSTOM_ENV_FILE=${1}
source $CUSTOM_ENV_FILE

NOVA_URL=${2}
NOVA_BRANCH=${3}
NOVA_MERGE_TRUNK=${4}
NOVA_REVISION=${5}
NOVA_DEB_PACKAGER_URL=${6:-$NOVA_DEB_PACKAGER_URL}
NOVA_RPM_PACKAGER_URL=${7:-$NOVA_RPM_PACKAGER_URL}

KEYSTONE_URL=${8}
KEYSTONE_BRANCH=${9}
KEYSTONE_MERGE_TRUNK=${10}
KEYSTONE_REVISION=${11}
KEYSTONE_DEB_PACKAGER_URL=${12:-$KEYSTONE_DEB_PACKAGER_URL}
KEYSTONE_RPM_PACKAGER_URL=${13:-$KEYSTONE_RPM_PACKAGER_URL}

GLANCE_URL=${14}
GLANCE_BRANCH=${15}
GLANCE_MERGE_TRUNK=${16}
GLANCE_REVISION=${17}
GLANCE_DEB_PACKAGER_URL=${18:-$GLANCE_DEB_PACKAGER_URL}
GLANCE_RPM_PACKAGER_URL=${19:-$GLANCE_RPM_PACKAGER_URL}

SWIFT_URL=${20}
SWIFT_BRANCH=${21}
SWIFT_MERGE_TRUNK=${22}
SWIFT_REVISION=${23}
SWIFT_DEB_PACKAGER_URL=${24:-$SWIFT_DEB_PACKAGER_URL}
SWIFT_RPM_PACKAGER_URL=${25:-$SWIFT_RPM_PACKAGER_URL}

CONFIG_TEMPLATE_DESCRIPTION=${26}
COOKBOOK_URL=${27}
NODES_CONFIG_DIR=${28}
SERVER_GROUP_JSON_CONF=${29}

# Setup default branches to merge if MERGE_TRUNK is checked
# These may be overridden by some environements
NOVA_GIT_MASTER_BRANCH=${NOVA_GIT_MASTER_BRANCH:-"master"}
GLANCE_GIT_MASTER_BRANCH=${GLANCE_GIT_MASTER_BRANCH:-"master"}
KEYSTONE_GIT_MASTER_BRANCH=${KEYSTONE_GIT_MASTER_BRANCH:-"master"}
SWIFT_GIT_MASTER_BRANCH=${SWIFT_GIT_MASTER_BRANCH:-"master"}

# Setup default RPM packager branches
# These may be overridden by some environements
NOVA_RPM_PACKAGER_BRANCH=${NOVA_RPM_PACKAGER_BRANCH:-"master"}
GLANCE_RPM_PACKAGER_BRANCH=${GLANCE_RPM_PACKAGER_BRANCH:-"master"}
KEYSTONE_RPM_PACKAGER_BRANCH=${KEYSTONE_RPM_PACKAGER_BRANCH:-"master"}
SWIFT_RPM_PACKAGER_BRANCH=${SWIFT_RPM_PACKAGER_BRANCH:-"master"}

GIT_CACHE_DIR=${GIT_CACHE_DIR:-"$HOME/.smokestack_git_cache"}

# Log to the job log and stdout
function fail {
	local MSG=$1
	echo "FAILURE_MSG=$MSG"
        stop_metric
	exit 1
}

function git_clone {
	local URL=${1:?"Please specify a URL."}
	local DIR=${2:?"Please specify a DIR."}
	local CACHE_DIR="$GIT_CACHE_DIR/$(echo \"$DIR\" | md5sum | cut -f 1 -d ' ')"
	[ -d "$GIT_CACHE_DIR" ] || mkdir -p "$GIT_CACHE_DIR"
	if [ -d "$CACHE_DIR" ]; then
		echo "Using git repository cache..."
		pushd "$CACHE_DIR"
		git pull origin master
		popd
		cp -a "$CACHE_DIR" "$DIR"
	else
		local COUNT=1
		echo "Git cloning: $URL"
		until GIT_ASKPASS=echo git clone "$URL" "$DIR"; do
			[ "$COUNT" -eq "4" ] && fail "Failed to clone: $URL"
			sleep $(( $COUNT * 5 ))
			COUNT=$(( $COUNT + 1 ))
		done
		cp -a "$DIR" "$CACHE_DIR"
	fi
}

function get_nova_source_git {

        start_metric "Git Clone Nova"
	git_clone "$NOVA_GIT_MASTER" "nova_source"
        stop_metric
	pushd nova_source
	git fetch $NOVA_URL $NOVA_BRANCH || \
		fail "Failed to git fetch branch $NOVA_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$NOVA_REVISION" ]; then
		git checkout $NOVA_REVISION || \
			fail "Failed to revert to revision $NOVA_REVISION."
	else
		NOVA_REVISION=$(git rev-parse --short HEAD)
		[ -z "$NOVA_REVISION" ] && \
			fail "Failed to obtain nova revision from git."
	fi
	echo "NOVA_REVISION=$NOVA_REVISION"

	if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
		git merge $NOVA_GIT_MASTER_BRANCH || fail "Failed to merge $NOVA_GIT_MASTER_BRANCH."
	fi

	popd
}

function get_keystone_source_git {

        start_metric "Git Clone Keystone"
	git_clone "$KEYSTONE_GIT_MASTER" "keystone_source"
        stop_metric
	pushd keystone_source
	git fetch $KEYSTONE_URL $KEYSTONE_BRANCH || \
		fail "Failed to git fetch branch $KEYSTONE_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$KEYSTONE_REVISION" ]; then
		git checkout $KEYSTONE_REVISION || \
			fail "Failed to revert to revision $KEYSTONE_REVISION."
	else
		KEYSTONE_REVISION=$(git rev-parse --short HEAD)
		[ -z "$KEYSTONE_REVISION" ] && \
			fail "Failed to obtain keystone revision from git."
	fi
	echo "KEYSTONE_REVISION=$KEYSTONE_REVISION"

	if [[ "$KEYSTONE_MERGE_TRUNK" == "true" ]]; then
		git merge $KEYSTONE_GIT_MASTER_BRANCH || fail "Failed to merge $KEYSTONE_GIT_MASTER_BRANCH."
	fi

	popd
}

function get_glance_source_git {

        start_metric "Git Clone Glance"
	git_clone "$GLANCE_GIT_MASTER" "glance_source"
        stop_metric
	pushd glance_source
	git fetch $GLANCE_URL $GLANCE_BRANCH || \
		fail "Failed to git fetch branch $GLANCE_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$GLANCE_REVISION" ]; then
		git checkout $GLANCE_REVISION || \
			fail "Failed to revert to revision $GLANCE_REVISION."
	else
		GLANCE_REVISION=$(git rev-parse --short HEAD)
		[ -z "$GLANCE_REVISION" ] && \
			fail "Failed to obtain glance revision from git."
	fi
	echo "GLANCE_REVISION=$GLANCE_REVISION"

	if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
		git merge $GLANCE_GIT_MASTER_BRANCH || fail "Failed to merge $GLANCE_GIT_MASTER_BRANCH."
	fi

	popd

}

function get_swift_source_git {

        start_metric "Git Clone Swift"
	git_clone "$SWIFT_GIT_MASTER" "swift_source"
        stop_metric
	pushd swift_source
	git fetch $SWIFT_URL $SWIFT_BRANCH || \
		fail "Failed to git fetch branch $SWIFT_BRANCH."
	git checkout -q FETCH_HEAD || fail "Failed to git checkout FETCH_HEAD."

	if [ -n "$SWIFT_REVISION" ]; then
		git checkout $SWIFT_REVISION || \
			fail "Failed to revert to revision $SWIFT_REVISION."
	else
		SWIFT_REVISION=$(git rev-parse --short HEAD)
		[ -z "$SWIFT_REVISION" ] && \
			fail "Failed to obtain swift revision from git."
	fi
	echo "SWIFT_REVISION=$SWIFT_REVISION"

	if [[ "$SWIFT_MERGE_TRUNK" == "true" ]]; then
		git merge $SWIFT_GIT_MASTER_BRANCH || fail "Failed to merge $SWIFT_GIT_MASTER_BRANCH."
	fi

	popd

}

export METRIC_START_TIME=""
export METRIC_NAME=""
export METRIC_SOURCE="" #defaults to hostname

function start_metric {
	METRIC_NAME=$(echo "$1" | sed -e 's|[\ \///:]|_|g')
        if [ -n "$2" ]; then
	    METRIC_SOURCE=$(echo "$2" | sed -e 's|[\ \///:]|_|g')
        elif [ -n "$CONFIG_TEMPLATE_DESCRIPTION" ]; then
	    METRIC_SOURCE=$(echo "$CONFIG_TEMPLATE_DESCRIPTION" | sed -e 's|[\ \///:]|_|g')
        else
	    METRIC_SOURCE="$HOSTNAME"
        fi
	METRIC_START_TIME=$(date +%s)
}

function stop_metric {
	local END_TIME=$(date +%s)
	local TOTAL_TIME="$(($END_TIME - $METRIC_START_TIME))"
        if [ -n "$METRIC_NAME" ]; then
	    echo "$END_TIME:$TOTAL_TIME:$METRIC_NAME:$METRIC_SOURCE" >> <%= ENV['METRICS_DATA_FILE'] %>
        fi
	METRIC_START_TIME=""
	METRIC_NAME=""
	METRIC_SOURCE=""
}

if [ ! -f ~/.gitconfig ]; then
cat > ~/.gitconfig <<-EOF_GIT_CONFIG_CAT
[user]
        name = SmokeStack
        email = smokestack@openstack.org
EOF_GIT_CONFIG_CAT
fi
