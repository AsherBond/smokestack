#Global Chef settings
TMP_DIR=$(mktemp -d)

<% job.job_group.smoke_test.test_suites.each do |suite| %>
RUN_<%= suite.name %>=true
<% end %>

function copy_hosts {
# Copy hosts file to each node
rake ssh bash <<-"EOF_COPY_HOSTS"
for IP in $(cat /etc/hosts | cut -f 1); do
[[ "$IP" != "127.0.0.1" ]] && scp /etc/hosts $IP:/etc/hosts
done
EOF_COPY_HOSTS
}

function delete_group {

	#for debugging purposes you can touch this file to hang the group
	rake ssh bash <<-EOF_BASH
	until [ ! -f /tmp/do_not_delete ]; do
		sleep 1
	done
	EOF_BASH
	rake group:delete
}

function setup {

	cd $TMP_DIR

	GIT_ASKPASS=echo \
	git_clone "<%= ENV['OPENSTACK_VPC_URL'] %>" "openstack_vpc"
	cd openstack_vpc

	cp "$NODES_JSON_CONF" config/nodes.json || \
		fail "Failed to copy nodes.json"

	cp "$SERVER_GROUP_JSON_CONF" config/server_group.json || \
		fail "Failed to copy server_group.json"


}

function run_job {

trap "{ delete_group; cd /tmp; rm -Rf $TMP_DIR; }" INT TERM EXIT
if rake group:create && rake group:poll; then

        local NOVA_MERGE_MASTER=""
        if [[ "$NOVA_MERGE_TRUNK" == "true" ]]; then
        	NOVA_MERGE_MASTER="true"
	fi
	rake nova:build_packages SOURCE_DIR="$TMP_DIR/nova_source" \
		RPM_PACKAGER_URL="$NOVA_RPM_PACKAGER_URL" \
		SOURCE_URL="$NOVA_URL" \
		SOURCE_BRANCH="$NOVA_BRANCH" \
		GIT_MASTER="$NOVA_GIT_MASTER" \
		MERGE_MASTER="$NOVA_MERGE_MASTER" \
		REVISION="$NOVA_REVISION" \
		CACHEURL="$RPM_CACHEURL" \
		|| fail "Failed to build nova packages."
    
        local GLANCE_MERGE_MASTER=""
        if [[ "$GLANCE_MERGE_TRUNK" == "true" ]]; then
        	GLANCE_MERGE_MASTER="true"
	fi
	rake glance:build_packages SOURCE_DIR="$TMP_DIR/glance_source" \
		RPM_PACKAGER_URL="$GLANCE_RPM_PACKAGER_URL" \
		SOURCE_URL="$GLANCE_URL" \
		SOURCE_BRANCH="$GLANCE_BRANCH" \
		GIT_MASTER="$GLANCE_GIT_MASTER" \
		MERGE_MASTER="$GLANCE_MERGE_MASTER" \
		REVISION="$GLANCE_REVISION" \
		CACHEURL="$RPM_CACHEURL" \
		|| fail "Failed to build glance packages."

        local KEYSTONE_MERGE_MASTER=""
        if [[ "$KEYSTONE_MERGE_TRUNK" == "true" ]]; then
        	KEYSTONE_MERGE_MASTER="true"
	fi
	rake keystone:build_packages SOURCE_DIR="$TMP_DIR/keystone_source" \
		RPM_PACKAGER_URL="$KEYSTONE_RPM_PACKAGER_URL" \
		SOURCE_URL="$KEYSTONE_URL" \
		SOURCE_BRANCH="$KEYSTONE_BRANCH" \
		GIT_MASTER="$KEYSTONE_GIT_MASTER" \
		MERGE_MASTER="$KEYSTONE_MERGE_MASTER" \
		REVISION="$KEYSTONE_REVISION" \
		CACHEURL="$RPM_CACHEURL" \
		|| fail "Failed to build keystone packages."

        rake keystone:build_python_keystoneclient SOURCE_URL="git://github.com/openstack/python-keystoneclient.git" CACHEURL="$RPM_CACHEURL"

        rake nova:build_python_novaclient SOURCE_URL="git://github.com/openstack/python-novaclient.git" CACHEURL="$RPM_CACHEURL"

	# Copy hosts file to all nodes
	copy_hosts
    
	PUPPETMODULES_URL=$(grep "^chef_cookbook_repos" $CHEF_INSTALLER_CONF | sed -e 's/.* //g')
	rake puppet:install SOURCE_URL="$PUPPETMODULES_URL"

	rake keystone:configure

	rake glance:load_images
    
	#run Torpedo API tests (Uses the Ruby openstack-compute gem)
	if [ -n "$RUN_TORPEDO" ]; then
		rake torpedo SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "Hit by Torpedo."; }
	fi
               
	# run smoke tests
	if [ -n "$RUN_NOVA_SMOKE_TESTS" ]; then
		rake nova:smoke_tests_fedora SERVER_NAME=nova1 NO_VOLUME=true || \
		{ rake tail_logs; fail "Smoke tests failed."; }

	fi

	# run Tempest
	if [ -n "$RUN_TEMPEST" ]; then
		rake tempest SERVER_NAME=nova1 || \
		{ rake tail_logs; fail "Caught in a Tempest."; }
	fi

	# Cache rpms if tests pass
	rake fedora:fill_cache CACHEURL=$RPM_CACHEURL

else
	rake tail_logs
	fail "Failed to create server group."
fi

}

setup
run_job
